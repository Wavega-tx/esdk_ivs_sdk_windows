// IVS_OCXPlayer.idl : type library source for ActiveX Control project.

// This file will be processed by the MIDL compiler tool to
// produce the type library (IVS_OCXPlayer.tlb) that will become a resource in
// IVS_OCXPlayer.ocx.

#include <olectl.h>
#include <idispids.h>

[ uuid(72B4D993-872D-422B-AFAB-BE389255CF81), version(1.0),
    control ]
library IVS_OCXPlayer
{
    importlib(STDOLE_TLB);

    //  Primary dispatch interface for CIVS_OCXPlayerCtrl
    [ 
        uuid(53E664DD-3322-4638-8082-85C397E75DB1)	
    ]
    dispinterface _DIVS_OCXPlayer
    {
    properties:
    methods:
        [id(34), helpstring("退出全屏播放")] LONG IVS_OCX_NormalScreenDisplay(void);
        [id(35), helpstring("全屏显示播放窗口")] LONG IVS_OCX_FullScreenDisplay(void);
        [id(36), helpstring("设置录像设备名")] LONG IVS_OCX_SetDeviceName(ULONG ulWndID, BSTR pDevName);
        [id(37), helpstring("播放随路语音(实时/录像)")] ULONG IVS_OCX_PlaySound(LONG lWndID);
        [id(38), helpstring("停止播放随路语音(实时/录像)")] ULONG IVS_OCX_StopSound(LONG lWndID);
		[id(39)] LONG IVS_OCX_SetVolume(LONG lWndID, ULONG ulVolumeValue);
		[id(40)] ULONG IVS_OCX_GetVolume(LONG lWndID);
        [id(41), helpstring("隐藏或显示工具栏")] LONG IVS_OCX_SetTitlebar(LONG lShowStatus);
        [id(42), helpstring("设置激活窗口")] ULONG IVS_OCX_SetActiveWnd(ULONG ulWndID);
        [id(43), helpstring("获取选中窗口编号")] ULONG IVS_OCX_GetSelectWnd(void);
        [id(44), helpstring("通过窗口编号获取摄像头")] BSTR IVS_OCX_GetCameraByWnd(ULONG ulWndID);
        [id(45), helpstring("设置OCX窗格工具栏按钮状态")] LONG IVS_OCX_SetToolbarButtonStatus(LONG lWndID, ULONG ulToolbarBtn, ULONG ulButtonStatus);
        [id(46), helpstring("设置标题栏是否显示")] LONG IVS_OCX_ShowTitlebar(VARIANT_BOOL bShow);
        [id(47), helpstring("设置工具栏是否显示")] LONG IVS_OCX_ShowToolbar(VARIANT_BOOL bShow);
        [id(48), helpstring("开启窗口3D定位")] ULONG IVS_OCX_Set3DPTZ(ULONG ulWndID, ULONG ulIsStart3D);
	    [id(49), helpstring("开始语音对讲")] BSTR IVS_OCX_StartVoiceTalkback(BSTR pTalkParam, BSTR pCameraCode);
	    [id(50), helpstring("停止语音对讲")] LONG IVS_OCX_StopVoiceTalkback(ULONG ulTalkbackHandle);
	    [id(51), helpstring("设置音频输出的音量")] LONG IVS_OCX_SetTalkbackVolume(ULONG ulVolumeValue);
	    [id(52), helpstring("获取音频输出的音量")] ULONG IVS_OCX_GetTalkbackVolume(void);
		[id(53), helpstring("设置摄像机别名")] ULONG IVS_OCX_SetCameraAlias(BSTR pCameraCode, BSTR pAlias);
		[id(54), helpstring("获取摄像机别名")] BSTR IVS_OCX_GetCameraAlias(BSTR pCameraCode);
		[id(55), helpstring("获取全部摄像机别名")] BSTR IVS_OCX_GetAllCameraAlias(void);
        [id(63), helpstring("开始实时浏览")] LONG IVS_OCX_StartRealPlay(BSTR pMediaPara, BSTR pCameraCode, LONG lWndID);
        [id(64), helpstring("停止实时浏览")] LONG IVS_OCX_StopRealPlay(LONG lWndID);
        [id(73), helpstring("根据鼠标位置获取窗口ID")] LONG IVS_OCX_GetMouseWnd(void);
        [id(74), helpstring("获取下一个可用空闲窗口ID")] LONG IVS_OCX_GetFreeWnd(void);
        [id(80), helpstring("初始化OCX")] LONG IVS_OCX_Init(void);
        [id(81), helpstring("释放OCX")] LONG IVS_OCX_Cleanup(void);
        [id(82), helpstring("获取版本号")] LONG IVS_OCX_GetVersion(void);
        [id(83)] ULONG IVS_OCX_StopAllRealPlay(void);
        [id(85)] LONG IVS_OCX_SetWndLayout(ULONG lWindowsNum);
        [id(86), helpstring("设置OCX窗格的边框颜色和背景色")] ULONG IVS_OCX_SetColor(ULONG ulColor);
        [id(87)] LONG IVS_OCX_Login(BSTR pUserName, BSTR pPWD, BSTR pServerIP,BSTR pPort, ULONG ulClientType);
        [id(88), helpstring("初始化设置工具条")] LONG IVS_OCX_SetToolbar(ULONG ulToolbarFlag);
        [id(89)] BSTR IVS_OCX_AddUser(BSTR pReqXml);
        [id(90)] LONG IVS_OCX_DeleteUser(BSTR pDomainCode, ULONG ulUserID);
        [id(91)] BSTR IVS_OCX_GetUserList(BSTR pUnifiedQuery);
        [id(92)] LONG IVS_OCX_Logout(void);
        [id(93)] ULONG IVS_OCX_SetLocalAlarmConfig(BSTR pAlarmParm);
        [id(94)] BSTR IVS_OCX_GetLocalAlarmConfig(void);
        [id(95)] ULONG IVS_OCX_SetLocalRecordConfig(BSTR pRecordParm);
        [id(96)] BSTR IVS_OCX_GetLocalRecordConfig(void);
        [id(97)] ULONG IVS_OCX_SetLocalCaptureConfig(BSTR pCaptureParm);
        [id(98)] BSTR IVS_OCX_GetLocalCaptureConfig(void);
        [id(99)] ULONG IVS_OCX_SetLocalNetWorkConfig(BSTR pNetWorkParm);
        [id(100)] BSTR IVS_OCX_GetLocalNetWorkConfig(void);
        [id(101)] ULONG IVS_OCX_SetLocalPTZConfig(BSTR pPTZParm);
        [id(102)] BSTR IVS_OCX_GetLocalPTZConfig(void);
        [id(103)] ULONG IVS_OCX_SetLocalCameraLinkConfig(BSTR pCameraCode, ULONG ulLinkMode);
        [id(104)] ULONG IVS_OCX_GetLocalCameraLinkConfig(BSTR pCameraCode);
        [id(105)] ULONG IVS_OCX_DelLocalCameraLinkConfig(BSTR pCameraCode);
        [id(106)] BSTR IVS_OCX_GetUserInfo(BSTR pDomainCode, ULONG ulUserID);
        [id(107)] LONG IVS_OCX_ChangePWD(BSTR pOldPWD, BSTR pNewPWD);
        [id(108)] LONG IVS_OCX_ResetPWD(BSTR pDomainCode, ULONG ulUserID, BSTR pNewPWD);
        [id(109)] BSTR IVS_OCX_GetUserGroupList(BSTR pReqXml);
        [id(114)] BSTR IVS_OCX_ModifyRecordPlan(BSTR pRecordPlan);
        [id(115)] BSTR IVS_OCX_DeleteRecordPlan(BSTR pDelRecPlanXML);
        [id(116)] BSTR IVS_OCX_GetRecordPlan(BSTR pRecordPlanListReq);
        [id(117)] BSTR IVS_OCX_AddDevice(BSTR pReqDev);
        [id(119)] BSTR IVS_OCX_QueryDeviceList(ULONG ulDeviceType, BSTR pQueryXml);
        [id(120)] LONG IVS_OCX_ModifyUser(BSTR pReqXml);
        [id(122)] ULONG IVS_OCX_AddKeyword(BSTR pCameraCode, BSTR pDeviceKeyWord);
        [id(123)] ULONG IVS_OCX_DelKeyword(BSTR pCameraCode);
        [id(124)] BSTR IVS_OCX_GetKeyword(void);
        [id(125)] BSTR IVS_OCX_AddUserGroup(BSTR pUserGroup);
        [id(126)] LONG IVS_OCX_DeleteUserGroup(BSTR pDomainCode, ULONG ulUserGroupID);
        [id(127)] LONG IVS_OCX_ModifyUserGroup(BSTR pUserGroup);
        [id(128)] LONG IVS_OCX_MoveUserGroup(BSTR pUserGroup);
        [id(129)] BSTR IVS_OCX_AddRole(BSTR pRoleInfo);
        [id(130)] LONG IVS_OCX_DeleteRole(BSTR pDomainCode, ULONG ulRoleID);
        [id(131)] LONG IVS_OCX_ModifyRole(BSTR pRoleInfo);
        [id(132)] BSTR IVS_OCX_GetRoleList(BSTR pDomainCode);
        [id(133)] BSTR IVS_OCX_GetOnlineUser(BSTR pUnifiedQuery);
        [id(134)] BSTR IVS_OCX_AddAlarmLevel(BSTR pAlarmLevel);
        [id(135)] LONG IVS_OCX_ModifyAlarmLevel(BSTR pAlarmLevel);
        [id(136)] LONG IVS_OCX_DeleteAlarmLevel(ULONG ulAlarmLevelID);
        [id(137)] LONG IVS_OCX_SetRecordSpace(BSTR pRecordSpace);
        [id(138)] LONG IVS_OCX_DeleteRecordSpace(BSTR pRecordSpace);
        [id(139)] LONG IVS_OCX_ModifyRecordSpace(BSTR pRecordSpace);
        [id(140)] LONG IVS_OCX_GetRecordSpace(BSTR pRecordSpace);
        [id(141)] LONG IVS_OCX_AddHelpInfo(BSTR helpInfo);
        [id(142)] LONG IVS_OCX_ModifyHelpInfo(BSTR helpInfo);

        [id(144)] BSTR IVS_OCX_GetOperationLog(BSTR pUnifiedQuery);
        [id(145)] LONG IVS_OCX_SetUserDeviceList(BSTR pReqXml);
        [id(146)] BSTR IVS_OCX_GetUserDeviceList(BSTR pUnifiedQuery);
        [id(147)] LONG IVS_OCX_SignOutOnlineUser(BSTR pDomainCode, ULONG ulUserOnlineID);
        [id(149)] LONG IVS_OCX_SetCustomWndLayout(ULONG ulLayoutID, BSTR pLayoutXml);
        [id(150)] BSTR IVS_OCX_GetCustomWndLayout(ULONG ulLayoutID);		
        [id(152)] BSTR IVS_OCX_GetRecordList(BSTR pCameraCode,ULONG lRecordMethod,BSTR pStartTime,BSTR pEndTime,ULONG lFromIndex,ULONG lToIndex);
        [id(153)] LONG IVS_OCX_GetGPUDecodeAbility(void);
        [id(154)] BSTR IVS_OCX_GetNVRList(BSTR pUnifiedQuery);
        [id(155)] BSTR IVS_OCX_GetDeviceGroup(BSTR pReqXml);
        [id(156)] BSTR IVS_OCX_GetDeviceInfo(BSTR pReqXml);
        [id(157)] BSTR IVS_OCX_DeleteDevice(BSTR pReqXml);
        [id(158)] BSTR IVS_OCX_AddRecordPlan(BSTR pRecordPlan);
        [id(159)] LONG IVS_OCX_ModifyDeviceGroupName(BSTR pReqXml);
        [id(160)] LONG IVS_OCX_MoveDeviceGroup(BSTR pReqXml);
        [id(161)] BSTR IVS_OCX_AddDeviceGroup(BSTR pReqXml);
        [id(162)] LONG IVS_OCX_DeleteDeviceGroup(BSTR pReqXml);
        [id(164)] LONG IVS_OCX_DeleteDeviceFromGroup(BSTR pReqXml);
        [id(165)] BSTR IVS_OCX_GetAlarmLevelList(void);
        [id(166)] LONG IVS_OCX_SetDeviceConfig(LONG iConfigType, BSTR pDevCode, BSTR pReqXml);
        [id(167)] BSTR IVS_OCX_GetDeviceConfig(LONG iConfigType,BSTR pReqXml);

        [id(168)] BSTR IVS_OCX_GetAlarmTypeList(BSTR pReqXml);
        [id(169)] BSTR IVS_OCX_Aes256CbcEncode(BSTR pszPlain);
        [id(170)] BSTR IVS_OCX_Aes256CbcDecode(BSTR pszCipher);

        [id(172)] BSTR IVS_OCX_GetAlarmLevel(LONG uiAlarmLevelID);

        [id(173)] LONG IVS_OCX_DeleteHelpInfo(BSTR helpInfo);
        [id(174)] BSTR IVS_OCX_QueryHelpInfo(BSTR helpInfo);
        [id(175)] BSTR IVS_OCX_GetMediaInfo(ULONG ulWndID);
        [id(176)] LONG IVS_OCX_SetAlarmTypeLevel(BSTR pReqXml);
        [id(177)] LONG IVS_OCX_SetDisplayScale(LONG lDisplayScale);
        [id(178)] BSTR IVS_OCX_AddFavoriteDevice(BSTR pReqXml);
        [id(179)] LONG IVS_OCX_DelFavoriteDevice(BSTR pReqXml);
        [id(180)] LONG IVS_OCX_MoveFavoriteDevice(BSTR pReqXml);
        [id(181)] BSTR IVS_OCX_AddFavoriteFolder(BSTR pReqXml);
        [id(182)] LONG IVS_OCX_DelFavoriteFolder(BSTR pReqXml);
        [id(183)] LONG IVS_OCX_ModFavoriteFolder(BSTR pReqXml);
        [id(184)] LONG IVS_OCX_MoveFavoriteFolder(BSTR pReqXml);
        [id(185)] BSTR IVS_OCX_GetFavoriteDevice(void);
        [id(189)] LONG IVS_OCX_AllocAreaGuardPlan(LPCTSTR pReqXml);
        [id(186)] LONG IVS_OCX_SubscribeAlarm(BSTR pReqXml);
        [id(187)] BSTR IVS_OCX_SubscribeAlarmQuery(BSTR pReqXml);

        [id(190)] BSTR IVS_OCX_GetDomainRoute(void);
        [id(191)] LONG IVS_OCX_ModifyAlarmArea(BSTR pReqXml);
        [id(192)] LONG IVS_OCX_DeleteAlarmArea(LPCTSTR pDomainCode,ULONG ulAlarmAreaID);
        [id(193)] BSTR IVS_OCX_GetAlarmAreaList(BSTR pReqXml);
        [id(195)] LONG IVS_OCX_ModifyAreaGuardPlan(LONG pReqXml);
        [id(196)] LONG IVS_OCX_DeleteAreaGuardPlan(LPCTSTR pDomainCode,ULONG ulAlarmAreaId);
        [id(197)] BSTR IVS_OCX_GetAreaGuardPlan(LPCTSTR pDomainCode,ULONG ulAlarmAreaId);
        [id(198)] BSTR IVS_OCX_AddAlarmArea(BSTR pReqXml);
        [id(199)] BSTR IVS_OCX_GetAlarmAreaInfo(LPCTSTR pDomainCode,ULONG ulAlarmAreaId);
        [id(194)] LONG IVS_OCX_UserAuthentication(BSTR pPWD);
        [id(200)] BSTR IVS_OCX_AddAlarmLinkage(BSTR pReqXml);
        [id(203)] LONG IVS_OCX_ModifyAlarmLinkage(BSTR pReqXml);
        [id(204)] LONG IVS_OCX_DeleteAlarmLinkage(BSTR pReqXml);
        [id(201)] BSTR IVS_OCX_GetAlarmLinkage(BSTR pReqXml);
        [id(202)] BSTR IVS_OCX_GetAlarmLinkageList(BSTR pReqXml);
        [id(212)] LONG IVS_OCX_AddDeviceToGroup(BSTR pReqXml);
		[id(213)] BSTR IVS_OCX_GetAlarmEventList(BSTR pReqXml);
		[id(214)] LONG IVS_OCX_StartAlarmAreaGuard(LPCTSTR pDomainCode,ULONG ulAlarmAreaId);
		[id(215)] LONG IVS_OCX_StopAlarmAreaGuard(LPCTSTR pDomainCode,ULONG ulAlarmAreaId);
		[id(222)] LONG IVS_OCX_AlarmCommission(BSTR pReqXml);
		[id(217)] BSTR IVS_OCX_GetAlarmEventInfo(LONG uiAlarmEventId, BSTR pAlarmInCode);
		[id(218)] BSTR IVS_OCX_QueryRecordList(BSTR pUnifiedQuery);
		[id(219)] BSTR IVS_OCX_IA(ULONG ulInterfaceType, BSTR pReqXml);   
		[id(220)] void IVS_OCX_SetPlayQualityMode(ULONG ulWndID, LONG lpalyQualityMode);
        [id(224)] BSTR IVS_OCX_GetChannelList(BSTR pDevCode);
		[id(223)] BSTR IVS_OCX_GetRecordPolicyByTime(BSTR pCameraCode);
		[id(229)] LONG IVS_OCX_AlarmReport(BSTR pAlarmReport);
		[id(225)] LONG IVS_OCX_AlarmConfirm(BSTR pReqXml);
		[id(226)] LONG IVS_OCX_AlarmCancel(BSTR pReqXml);
		[id(227)] BSTR IVS_OCX_PtzControl(BSTR pCameraCode,LONG lOperateCode, BSTR pControlPara1, BSTR pControlPara2);
		[id(228)] BSTR IVS_OCX_GetRecordStatus(BSTR pCameraCode,ULONG ulRecordMethod);
        [id(230)] LONG IVS_OCX_EnableGPU(BOOL bEnable);
		[id(231)] LONG IVS_OCX_SetRecordPolicyByTime(BSTR pRecordPolicyXml);
		[id(232)] BSTR IVS_OCX_GetUserID(void);
		[id(233)] LONG IVS_OCX_BackupUserData(void);
        [id(234)] LONG IVS_OCX_RestoreUserData(void);
        [id(235)] BSTR IVS_OCX_GetRoleInfoByRoleID(BSTR pDomainCode, ULONG ulRoleID);
        [id(236)] BSTR IVS_OCX_GetRoleInfoByUserID(BSTR pDomainCode, ULONG ulUserID);
        [id(237)] BSTR IVS_OCX_GetDefaultRoleAccountRule(BSTR pDomainCode);
        [id(238)] BSTR IVS_OCX_GetOperationRightGroup(BSTR pDomainCode);
        [id(239)] LONG IVS_OCX_CheckPWDByRole(BSTR pDomainCode, ULONG ulRoleID, BSTR pLoginName, BSTR pPWD);
        [id(240)] BSTR IVS_OCX_GetAutoCreatePWD(BSTR pDomainCode, ULONG ulRoleID, BSTR pLoginName);
        [id(241)] LONG IVS_OCX_StartPlatformPlayBack(BSTR pCameraCode, BSTR pPlaybackParam, LONG lWndID);
        [id(242)] LONG IVS_OCX_StopPlatformPlayBack(LONG lWndID);
        [id(243)] LONG IVS_OCX_PlayBackPause(LONG lWndID);
        [id(244)] LONG IVS_OCX_PlayBackResume(LONG lWndID);
        [id(245)] LONG IVS_OCX_PlaybackFrameStepForward(LONG lWndID);
        [id(246)] LONG IVS_OCX_SetPlayBackSpeed(LONG lWndID, FLOAT fSpeed);
        [id(247)] BSTR IVS_OCX_GetPlayBackSpeed(LONG lWndID);
        [id(248)] BSTR IVS_OCX_GetPlayBackTime(LONG lWndID);
        [id(249)] BSTR IVS_OCX_GetPlayBackStatus(LONG lWndID);
        [id(250)] LONG IVS_OCX_SetIAToolbar(ULONG ulToolbarFlag);
		[id(251), helpstring("初始化电视墙")] LONG IVS_OCX_InitTVWall(void);
		[id(252), helpstring("释放电视墙")] LONG IVS_OCX_CleanupTVWall(void);
		[id(254)] LONG IVS_OCX_WinUserLogin(BSTR pUserName, BSTR pPWD, BSTR pServerIP, BSTR pServerPort, BSTR pDomainName, ULONG ulLoginType, ULONG ulClientType);
		[id(257)] LONG IVS_OCX_SetPlayBackTime(LONG lWndID, ULONG ulTime);
		[id(258)] LONG IVS_OCX_SetGraphics(ULONG ulWindowID, BSTR pGraphicsXml);
		[id(259)] LONG IVS_OCX_DeleteGraphicsSelected(ULONG ulWindowID);
		[id(260)] LONG IVS_OCX_DeleteGraphics(ULONG ulWindowID);
		[id(261)] ULONG IVS_OCX_StartLocalRecord(BSTR pRecordPara, LONG lWndID);
		[id(262)] LONG IVS_OCX_StopLocalRecord(LONG lWndID);
		[id(263)] LONG IVS_OCX_EnableDraw(ULONG ulWindowID);
		[id(264)] LONG IVS_OCX_DisableDraw(ULONG ulWindowID);
		[id(265)] BSTR IVS_OCX_GetGraphics(ULONG ulWindowID);
		[id(266), helpstring("获取所有电视墙列表")] BSTR IVS_OCX_GetTVWallList(void);
		[id(267), helpstring("新增电视墙")] BSTR IVS_OCX_AddTVWall(BSTR pTVWall);
		[id(268), helpstring("修改电视墙属性")] LONG IVS_OCX_ModifyTVWallInfo(BSTR pTVWall);
		[id(269), helpstring("修改电视墙布局")] LONG IVS_OCX_ModifyTVWallLayout(BSTR pTVWall);
		[id(270), helpstring("删除电视墙")] LONG IVS_OCX_DeleteTVWall(ULONG ulTVWallID);
		[id(271)] BSTR IVS_OCX_PopupFloderDialog(void);
		[id(272), helpstring("启动电视墙实时浏览")] LONG IVS_OCX_StartRealPlayTVWall(ULONG ulTVWallID, BSTR pCameraCode, BSTR pRealplayParam, ULONG ulWndID);
		[id(273), helpstring("停止电视墙实时浏览")] LONG IVS_OCX_StopRealPlayTVWall(ULONG ulTVWallID, ULONG ulWndID);
		[id(274), helpstring("开始电视墙平台录像回放")] LONG IVS_OCX_StartPlatformPlayBackTVWall(ULONG ulTVWallID, BSTR pCameraCode, BSTR pPlaybackParam, ULONG ulWndID);
		[id(275), helpstring("停止电视墙平台录像回放")] LONG IVS_OCX_StopPlatformPlayBackTVWall(ULONG ulTVWallID, ULONG ulWndID);
		[id(276), helpstring("根据用户输入的设备类型获取相应的设备列表")] BSTR IVS_OCX_GetDeviceList(ULONG ulDeviceType, ULONG ulFromIndex, ULONG ulToIndex);
		[id(277)] BSTR IVS_OCX_GetDeviceUserList(BSTR pDomainCode, BSTR pDevCode, ULONG ulIsUserOnline, ULONG ulFromIndex, ULONG ulToIndex);
		[id(278), helpstring("设置电视墙临时场景")] LONG IVS_OCX_SetTVWallTempScenario(BSTR pScenarioXml);
		[id(279), helpstring("获取电视墙临时场景")] BSTR IVS_OCX_GetTVWallTempScenario(ULONG pScenarioID);
		[id(280), helpstring("根据编号获取电视墙")] BSTR IVS_OCX_GetTVWallByID(ULONG ulTVWallID);
		[id(281)] LONG IVS_OCX_StopDrawGraphics(ULONG ulWindowID, ULONG ulGraphicGroup);
		[id(282)] LONG IVS_OCX_SelectGraphicByGroup(ULONG ulWindowID, ULONG ulGraphicGroup);
		[id(283)] LONG IVS_OCX_SelectCancel(ULONG ulWindowID);
		[id(284)] BSTR IVS_OCX_GetGraphicsByGroup(ULONG ulWindowID, ULONG ulGraphicGroup);
		[id(285)] LONG IVS_OCX_DeleteGraphicsByGroup(ULONG ulWindowID, ULONG ulGraphicGroup);
		[id(286)] LONG IVS_OCX_SetRelationShip(ULONG ulWindowID, ULONG ulGraphicGroupA, ULONG ulGraphicGroupB, ULONG ulRelationShipType);
		[id(287)] LONG IVS_OCX_SetRecordSearchInfo(BSTR pSearchInfo);
		[id(288)] BSTR IVS_OCX_GetRecordSearchInfo(void);
		[id(289)] LONG IVS_OCX_SetTempScenario(BSTR pScenarioXml);
		[id(290)] BSTR IVS_OCX_GetTempScenario(void);
		[id(291)] BSTR IVS_OCX_AddScenarioFavorite(BSTR pScenarioXml);
		[id(292)] LONG IVS_OCX_ModScenarioFavorite(BSTR pScenarioXml);
		[id(293)] LONG IVS_OCX_DelScenarioFavorite(BSTR pScenarioID);
		[id(294)] BSTR IVS_OCX_GetScenarioFavoriteList(void);
		[id(295)] BSTR IVS_OCX_GetScenarioFavorite(BSTR pScenarioID);
		[id(296)] LONG IVS_OCX_DrawGraphics(ULONG ulWindowID, BSTR pGraphicsXml);
		[id(297)] LONG IVS_OCX_SetMainDeviceName(BSTR pDevCode, BSTR pNewDevName);
		[id(298)] LONG IVS_OCX_SetCameraName(BSTR pCameraCode, BSTR pNewCameraName);
		[id(308)] BSTR IVS_OCX_GetTVWallGroupTurnInspect(ULONG ulTVWallID);
		[id(309)] BSTR IVS_OCX_AddTVWallGroupTurnInspect(BSTR pTVWall);
		[id(310)] LONG IVS_OCX_ModifyTVWallGroupTurnInspect(BSTR pTVWall);
		[id(311)] LONG IVS_OCX_DeleteTVWallGroupTurnInspect(ULONG ulTVWallID);
		[id(312)] BSTR IVS_OCX_GetTVWallTurnInspect(ULONG ulTVWallID);
		[id(313)] LONG IVS_OCX_AddTVWallTurnInspect(BSTR pTVWall);
		[id(314)] LONG IVS_OCX_ModifyTVWallTurnInspect(BSTR pTVWall);
		[id(315)] LONG IVS_OCX_DeleteTVWallTurnInspect(ULONG ulTVWallID);
		[id(316)] LONG IVS_OCX_SetTurnInspectPlan(BSTR pTurnInspectPlanInfo);
		[id(317)] LONG IVS_OCX_ModifyTurnInspectPlan(BSTR pTurnInspectPlanInfo);
		[id(318)] LONG IVS_OCX_RebootDevice(BSTR pDeviceCode, ULONG ulRebootType);
		[id(319)] BSTR IVS_OCX_GetConfigInfo(BSTR pReqXml);
		[id(320)] BSTR IVS_OCX_GetGraphicsByPercent(ULONG ulWindowID);
		[id(321)] LONG IVS_OCX_SetGraphicsByPercent(ULONG ulWindowID, BSTR pGraphicsXml);
		[id(322)] BSTR IVS_OCX_AddBookmark(BSTR pNVRCode,BSTR pCameraCode,BSTR pBookmarkName,BSTR pBookmarkTime);
		[id(323)] BSTR IVS_OCX_GetBookmarkList(BSTR pQueryXml);
		[id(324)] LONG IVS_OCX_ModifyBookmark(BSTR pNVRCode,BSTR pCameraCode,ULONG ulBookmarkID,BSTR pNewBookmarkName);
		[id(325)] LONG IVS_OCX_DeleteBookmark(BSTR pNVRCode,BSTR pCameraCode,ULONG ulBookmarkID);
		[id(326)] BSTR IVS_OCX_AddPTZPreset(BSTR pCameraCode, BSTR pPresetName);
		[id(327)] LONG IVS_OCX_DelPTZPreset(BSTR pCameraCode, ULONG ulPresetIndex);
		[id(328)] LONG IVS_OCX_ModPTZPreset(BSTR pCameraCode, ULONG ulPresetIndex, BSTR pPresetName);
		[id(329)] BSTR IVS_OCX_GetPTZPresetList(BSTR pCameraCode);
		[id(330)] LONG IVS_OCX_SetGuardPos(BSTR pGuardPosInfo);
		[id(331)] BSTR IVS_OCX_GetGuardPos(BSTR pCameraCode);
		[id(332)] BSTR IVS_OCX_AddCruiseTrack(BSTR pCuriseTrackInfo);
		[id(333)] LONG IVS_OCX_DelCruiseTrack(BSTR pCameraCode, ULONG ulTrackIndex, ULONG ulCruiseType);
		[id(334)] LONG IVS_OCX_ModCruiseTrack(BSTR pCuriseTrackInfo);
		[id(335)] BSTR IVS_OCX_GetCruiseTrackList(BSTR pCameraCode);
		[id(336)] BSTR IVS_OCX_GetCruiseTrack(BSTR pCameraCode, ULONG ulTrackIndex);
		[id(337)] LONG IVS_OCX_SetCruisePlan(BSTR pCruisePlan);
		[id(338)] BSTR IVS_OCX_GetCruisePlan(BSTR pCameraCode);
		[id(339)] BSTR IVS_OCX_AddCameraSwitch(BSTR pSwitchInfo);
		[id(340)] LONG IVS_OCX_DelCameraSwitch(BSTR pCameraSwitchID);
		[id(341)] BSTR IVS_OCX_GetCameraSwitchList(void);
		[id(342)] BSTR IVS_OCX_GetCameraSwitchInfo(BSTR pCameraSwitchID);
		[id(343)] LONG IVS_OCX_LockUser(BSTR pDomainCode, ULONG ulUserID, ULONG ulLock);
		[id(344)] LONG IVS_OCX_LocalSnapshot(LONG lWndID);
		[id(345)] LONG IVS_OCX_PlatformSnapshot(BSTR pCameraCode);
		[id(346)] BSTR IVS_OCX_GetSnapshotList(BSTR pQueryParam);
		[id(347)] LONG IVS_OCX_DownloadSnapshot(ULONG ulPictureID, BSTR pFileName);
		[id(348)] LONG IVS_OCX_DeleteSnapshot(BSTR pCameraCode, ULONG ulPictureID);
		[id(349)] LONG IVS_OCX_SetSnapshotPlan(BSTR pSnapshotPlan);
		[id(350)] BSTR IVS_OCX_GetSnapshotPlan(BSTR pCameraCode);
		[id(351)] LONG IVS_OCX_GetLogo(ULONG ulLogoType, BSTR pLogoFile);
		[id(352)] LONG IVS_OCX_UploadLogo(ULONG ulLogoType,BSTR pLogoFile);
		[id(353)] BSTR IVS_OCX_GetStatement(BSTR pLanguageType);
		[id(354)] LONG IVS_OCX_UploadStatement(BSTR pLanguageType,BSTR pStatementFile);
		[id(355), helpstring("设置警告状态")] LONG IVS_OCX_SetWarnState(ULONG ulWndID, ULONG ulWarnState, ULONG ulWarnSeconds);
		[id(356)] LONG IVS_OCX_StartPlatformRecord(BSTR pCameraCode,ULONG ulRecordTime);
		[id(357)] LONG IVS_OCX_StopPlatformRecord (BSTR pCameraCode);
		[id(358)] LONG IVS_OCX_StartPURecord(BSTR pCameraCode,ULONG ulRecordTime);
		[id(359)] LONG IVS_OCX_StopPURecord (BSTR pCameraCode);
        [id(360)] LONG IVS_OCX_StartAlarmOut(BSTR pAlarmOutCode);
		[id(361)] LONG IVS_OCX_StopAlarmOut(BSTR pAlarmOutCode);
		[id(362)] LONG IVS_OCX_SetCameraBackupConfig(BSTR pBackupXml);
		[id(363)] BSTR IVS_OCX_GetCameraBackupConfig(BSTR pCameraCode);
		[id(364)] LONG IVS_OCX_SetWndType(ULONG ulWindID,ULONG ulTyle);
		[id(365)] LONG IVS_OCX_DeleteAlarmWnd(ULONG ulWindID);
		[id(366), helpstring("设置电视墙OCX窗口布局")] LONG IVS_OCX_SetTVWallWndLayout(ULONG ulTVWallID);
		[id(367), helpstring("设置电视墙OCX窗格状态")] LONG IVS_OCX_SetTVWallPaneStatus(ULONG ulTVWallID, ULONG ulPaneID, ULONG ulPaneStatus);
	    [id(368)] BSTR IVS_OCX_GetHelpInfoText(BSTR pAlarmInCode, BSTR pAlarmType);
		[id(369)] LONG IVS_OCX_SetLanguage(BSTR pLanguage);
		[id(370)] LONG IVS_OCX_StartSearchDevice(BSTR pDomainCode, BSTR pSearchInfo);
		[id(371)] LONG IVS_OCX_StopSearchDevice(BSTR pDomainCode, BSTR pSearchInfo);
		[id(372)] BSTR IVS_OCX_VerifyDevice(BSTR pDomainCode, BSTR pVerifyInfo);
		[id(373)] BSTR IVS_OCX_GetDevLog(BSTR pQueryXml);
		[id(374), helpstring("解码器注册信息列表")] BSTR IVS_OCX_GetDecoderList(void);
		[id(375)] BSTR IVS_OCX_GetDeviceAlarmList(BSTR pReqXml);
		[id(376)] BSTR IVS_OCX_GetCPUMemory(BSTR pNodeCode);
		[id(377)] LONG IVS_OCX_AddRecordBackupPlan(BSTR pBackupPlan);
		[id(378)] LONG IVS_OCX_ModifyRecordBackupPlan(BSTR pBackupPlan);
		[id(379)] LONG IVS_OCX_DeleteRecordBackupPlan(BSTR pBackupPlan);
		[id(380)] BSTR IVS_OCX_GetRecordBackupPlan(BSTR pQueryInfo);
		[id(381)] LONG IVS_OCX_DelSnapshotPlan(BSTR pCameraCode);
		[id(382)] BSTR IVS_OCX_GetDomainList(void);
		[id(383), helpstring("开始实时语音广播")] LONG IVS_OCX_StartRealBroadcast(void);
		[id(384), helpstring("停止实时语音广播")] LONG IVS_OCX_StopRealBroadcast(void);
		[id(385), helpstring("开始文件语音广播")] LONG IVS_OCX_StartFileBroadcast(BSTR pFileName, ULONG ulCycle);
		[id(386), helpstring("停止文件语音广播")] LONG IVS_OCX_StopFileBroadcast(void);
		[id(387), helpstring("添加广播摄像机")] LONG IVS_OCX_AddBroadcastDevice(BSTR pCameraCode);
		[id(388), helpstring("删除广播摄像机")] LONG IVS_OCX_DeleteBroadcastDevice(BSTR pCameraCode);
		[id(389), helpstring("设置轮训窗口")] LONG IVS_OCX_SetCameraSwitchWnd(ULONG ulWndID,ULONG ulStyle);
		[id(390), helpstring("获取窗口类型")] LONG IVS_OCX_GetWndType(ULONG ulWndID);
		[id(391)] LONG IVS_OCX_IALocusOverly(ULONG ulWinID, ULONG ulRuleType, ULONG ulStartOverly);
		[id(392)] BSTR IVS_OCX_GetExDomainList(BSTR pQueryInfo);
		[id(393)] BSTR IVS_OCX_ShareCatalog(BSTR pShareInfo);
		[id(394)] BSTR IVS_OCX_GetShareCatalogList(BSTR pQueryInfo);
		[id(395)] BSTR IVS_OCX_GetIACPUMemory(BSTR pNodeCode); 
		[id(396)] LONG IVS_OCX_PlaybackFrameStepBackward(LONG lWndID);
		[id(397)] LONG IVS_OCX_StartSyncPlay(BSTR pSyncPlayInfo);
		[id(398)] LONG IVS_OCX_StopSyncPlay(void);
		[id(399)] BSTR IVS_OCX_GetRecordTask();
		[id(400)] BSTR IVS_OCX_QueryPerformance(BSTR pNodeCode);
		[id(401)] LONG IVS_OCX_SignOutUser(BSTR pDomainCode, ULONG ulUserID);
		[id(402)] BSTR IVS_OCX_StartPlatformDownload(BSTR pCameraCode, BSTR pStartTime, BSTR pEndTime, BSTR pDownloadParamXml);
		[id(403)] LONG IVS_OCX_StopPlatformDownload(ULONG ulDownloadHandle);
		[id(404)] BSTR IVS_OCX_StartPUDownload(BSTR pCameraCode, BSTR pStartTime, BSTR pEndTime, BSTR pDownloadParamXml);
		[id(405)] LONG IVS_OCX_StopPUDownload(ULONG ulDownloadHandle);
		[id(406)] LONG IVS_OCX_DownloadPause(ULONG ulDownloadHandle);
		[id(407)] LONG IVS_OCX_DownloadResume(ULONG ulDownloadHandle);
		[id(408)] BSTR IVS_OCX_GetDownloadInfo(ULONG ulDownloadHandle);
		[id(409)] LONG IVS_OCX_StartPUPlayBack(BSTR pCameraCode, BSTR pPlaybackParam, LONG lWndID);
		[id(410)] LONG IVS_OCX_StopPUPlayBack(LONG lWndID);
		[id(411)] BSTR IVS_OCX_GetRecordBackupTaskList (BSTR pQueryInfo);
		[id(412)] LONG IVS_OCX_StartRecordBackupTask (BSTR pQueryInfo);
		[id(413)] LONG IVS_OCX_StopRecordBackupTask (BSTR pQueryInfo);
		[id(414)] BSTR IVS_OCX_GetDriverList(BSTR pReqXml);
		[id(415)] BSTR IVS_OCX_GetTemplateList(BSTR pReqXml);
        [id(416)] LONG IVS_OCX_DelRecordBackupTask(BSTR pQueryInfo);

		[id(417)] LONG IVS_OCX_AddRecordBackupTask(BSTR pBackupTask);
		[id(418)] void IVS_OCX_SetEventReceiver(void);
		[id(419), helpstring("实况窗口不需要Drag")] LONG IVS_OCX_SetWndDrag(ULONG ulWndID,ULONG ulEnable);
		[id(420), helpstring("刷新窗口bar位置")] void IVS_OCX_RefreshWnd(ULONG ulRefreshType);
		[id(421)]BSTR IVS_OCX_GetAlarmLinkageAction(BSTR pReqXml);

        [id(422)] BSTR IVS_OCX_GetPWDStrength(BSTR pPWD);
		[id(423)] LONG IVS_OCX_AddCameraSwitchPlan(BSTR pSwitchPlanInfo);
		[id(424)] LONG IVS_OCX_DelCameraSwitchPlan(BSTR pCameraSwitchID);
		[id(425)] BSTR IVS_OCX_GetCameraSwitchPlanList(void);
		[id(426)] BSTR IVS_OCX_GetCameraSwitchPlan(BSTR pCameraSwitchID);
		[id(427)] LONG IVS_OCX_UnlockRecord(BSTR pUnlockXml);
		[id(428)] LONG IVS_OCX_LockRecord(BSTR pLockXml);
		[id(429)] BSTR IVS_OCX_GetVideoNumAndResource(BSTR pCameraCode);
		[id(430)] LONG IVS_OCX_UnlockBackupRecord (BSTR pUnlockXml);
		[id(431)] LONG IVS_OCX_LockBackupRecord(BSTR pLockXml);
		[id(432)] BSTR IVS_OCX_GetMotionRangeDataPlatform(BSTR pCameraCode,BSTR pStartTime,BSTR pEndTime,LONG lFromIndex,LONG lToIndex);
		[id(433)] LONG IVS_OCX_AddBookmarkForBackup(BSTR pDomainCode,BSTR pNVRCode,BSTR pCameraCode,BSTR pBookmarkName,BSTR pBookmarkTime);
		[id(434)] BSTR IVS_OCX_GetBookmarkListForBackup(BSTR pQueryXml);
		[id(435)] LONG IVS_OCX_ModifyBookmarkForBackup(BSTR pDomainCode,BSTR pNVRCode,BSTR pCameraCode,ULONG ulBookmarkID,BSTR pNewBookmarkName);
		[id(436)] LONG IVS_OCX_DeleteBookmarkForBackup(BSTR pDomainCode,BSTR pNVRCode,BSTR pCameraCode,ULONG ulBookmarkID);
        [id(437)] BSTR IVS_OCX_OMUQueryDevReport(BSTR pReqXml);
        [id(438)] BSTR IVS_OCX_OMUQueryDevReportDetail(BSTR pReqXml);
        [id(439)] BSTR IVS_OCX_OMUQueryRealtimeReport(BSTR pReqXml);
        [id(440)] BSTR IVS_OCX_OMUQueryRealtimeReportDetail(BSTR pReqXml);
        [id(441)] BSTR IVS_OCX_OMUQueryQDReport(BSTR pReqXml);
        [id(442)] BSTR IVS_OCX_OMUQueryQDReportDetail(BSTR pReqXml);
        [id(443)] BSTR IVS_OCX_OMUQueryRecordPlanReport(BSTR pReqXml);
        [id(444)] BSTR IVS_OCX_OMUQueryRecordPlanReportDetail(BSTR pReqXml);
        [id(445)] BSTR IVS_OCX_OMUQueryRecordIntegralityReport(BSTR pReqXml);
        [id(446)] BSTR IVS_OCX_OMUQueryRecordIntegralityReportDetail(BSTR pReqXml);
        [id(447)] BSTR IVS_OCX_OMUQueryPacketLossRateReport(BSTR pReqXml);
        [id(448)] BSTR IVS_OCX_OMUQueryPacketLossRateReportDetail(BSTR pReqXml);
        [id(449)] BSTR IVS_OCX_OMUQueryDiskUsageRateReport(BSTR pReqXml);
		[id(450)] LONG IVS_OCX_SetDevGroupRemark(BSTR pReqXml);
		[id(451)] BSTR IVS_OCX_GetDevGroupRemark(BSTR pReqXml);
		[id(452)] BSTR IVS_OCX_OMUAddAlarmLinkageRule(BSTR pReqXml);
		[id(453)] LONG IVS_OCX_OMUModAlarmLinkageRule(BSTR pReqXml);
		[id(454)] LONG IVS_OCX_OMUDelAlarmLinkageRule(BSTR pReqXml);
		[id(455)] BSTR IVS_OCX_OMUGetAlarmLinkageRuleList(BSTR pReqXml);
		[id(456)] BSTR IVS_OCX_OMUGetAlarmLinkageRuleDetail(BSTR pReqXml);
		[id(457)] BSTR IVS_OCX_OMUGetDevTypeByNodeCode(BSTR pReqXml);
		[id(458)] BSTR IVS_OCX_GetPrerecordCameraList();
		[id(460)] LONG IVS_OCX_VerifyWatermark(LONG lWndID, ULONG ulVerifyWatermark);
		[id(461)] LONG IVS_OCX_WatermarkAlarmConfirm(BSTR pConfirmInfo);
		[id(462)] LONG IVS_OCX_WatermarkAlarmCancel(BSTR pCancelInfo);
		[id(463)] BSTR IVS_OCX_QueryWatermarkAlarmList(BSTR pQueryXml);
		[id(464), helpstring("获取电视墙窗格编号,主要在画面分割时调用")] BSTR IVS_OCX_GetPaneWndID(ULONG ulTVWallID, ULONG ulPaneID);
		[id(465)] LONG IVS_OCX_StartLocalPlayBack(LONG lWndID, BSTR pFileName, BSTR pPlaybackParam);
		[id(466)] LONG IVS_OCX_StopLocalPlayBack(LONG lWndID);
		[id(467)] BSTR IVS_OCX_GetDeviceCapability(LONG lCapabilityType, BSTR pDevCode);
        [id(468), helpstring("启动网络键盘")] LONG IVS_OCX_StartNetKeyBoard(ULONG ulNetKeyBoardVendor ,ULONG ulPort);
        [id(469), helpstring("停止网络键盘")] LONG IVS_OCX_StopNetKeyBoard(void);
        [id(470), helpstring("设置网络键盘监听端口")] LONG IVS_OCX_SetNetKeyBoardPort(ULONG ulPort);
        [id(471)] BSTR IVS_OCX_GetCameraPlanInfo(BSTR pReqXml);
		[id(472)] LONG IVS_OCX_SetExDomainRecordPolicy(BSTR pReqXml);
		[id(473)] BSTR IVS_OCX_GetExDomainRecordPolicy(BSTR pReqXml);
		[id(474)] BSTR IVS_OCX_AddExDomainRecordPlan(BSTR pRecordPlanXml);
		[id(475)] BSTR IVS_OCX_ModExDomainRecordPlan(BSTR pRecordPlan);
		[id(476)] BSTR IVS_OCX_DelExDomainRecordPlan(BSTR pDelRecPlanXML);
		[id(477)] BSTR IVS_OCX_GetExDomainRecordPlan(BSTR pRecordPlanListReq);
		[id(478)] BSTR IVS_OCX_CheckNewVersion(BSTR pReqXml);
		[id(479)] LONG IVS_OCX_SetDeviceGuard(BSTR pReqXml);
		[id(480)] LONG IVS_OCX_SetLogPath(BSTR pLogPath);
        [id(481)] LONG IVS_OCX_SignOutUserByRole(BSTR pDomainCode, ULONG ulRoleID);
		[id(482)] LONG IVS_OCX_StartBackupPlayBack(BSTR pDomainCode,BSTR pNVRCode,BSTR pCameraCode, BSTR pPlaybackParam, LONG lWndID);
		[id(483)] LONG IVS_OCX_StopBackupPlayBack(LONG lWndID);
		[id(484)] LONG IVS_OCX_ShowInstantReplayBar(ULONG ulWndID,ULONG ulStyle);
		[id(485)] BSTR IVS_OCX_GetCameraThumbnail(BSTR pCameraCode);
		[id(486)] BSTR IVS_OCX_GetAlarmSnapshotList(BSTR pQueryParam);
		[id(487)] LONG IVS_OCX_ModLockRecord(BSTR pLockXml);
		[id(488)] LONG IVS_OCX_ShowPaneBar(ULONG ulWndID,ULONG ulStyle);
        [id(489)] LONG IVS_OCX_StopDisasterRecoveryDownload (ULONG ulDownloadHandle);
        [id(490)] BSTR IVS_OCX_StartDisasterRecoveryDownload (BSTR pCameraCode,BSTR pStartTime,BSTR pEndTime, BSTR pDownloadParamXml);
		[id(491)] BSTR IVS_OCX_StartBackupDownload(BSTR pDomainCode,BSTR pNVRCode,BSTR pCameraCode, BSTR pStartTime, BSTR pEndTime, BSTR pDownloadParamXml);
		[id(492)] LONG IVS_OCX_StopBackupDownload(ULONG ulDownloadHandle);
		[id(493)] BSTR IVS_OCX_AddRealPlayBookmark(BSTR pCameraCode,BSTR pBookmarkName,BSTR pBookmarkTime);
		[id(494)] LONG IVS_OCX_ModifyRealPlayBookmark(BSTR pCameraCode,ULONG ulBookmarkID,BSTR pNewBookmarkName);
		[id(495)] LONG IVS_OCX_DeleteRealPlayBookmark(BSTR pCameraCode,ULONG ulBookmarkID);
		[id(496), helpstring("平台录像同步回放上墙")] LONG IVS_OCX_StartSyncPlayTVWall(ULONG ulTVWallID, BSTR pSyncPlayInfo);
		[id(497), helpstring("平台录像同步回放下墙")] LONG IVS_OCX_StopSyncPlayTVWall(ULONG ulTVWallID);
		[id(498)] BSTR IVS_OCX_SetPaneEMap(ULONG ulWndID);
        [id(499)] BSTR IVS_OCX_GetPWDExpireInfo(void);
		[id(500)] BSTR IVS_OCX_GetNetkeyboardList(void);
        [id(501)] LONG IVS_OCX_SaveNetkeyboardCamera(BSTR pNetboardCameraList);
        [id(502)] LONG IVS_OCX_ModNetkeyboardCamera(BSTR pNetboardCamera);
        [id(503)] LONG IVS_OCX_StartDisasterRecoveryPlayBack( BSTR pCameraCode,BSTR pPlaybackParam,LONG lWndID );
        [id(504)] LONG IVS_OCX_StopDisasterRecoveryPlayBack( LONG lWndID );
		[id(505)] LONG IVS_OCX_ImportDevCfgFile(BSTR pDevCode, BSTR pCFGFile);
		[id(506)] LONG IVS_OCX_ExportDevCfgFile(BSTR pDevCode, BSTR pCFGFilePath);
        [id(507)] LONG IVS_OCX_PlaybackFrameStepForwardTVWall(ULONG ulTVWallID, LONG lWndID);
		[id(508)] LONG IVS_OCX_DelGuardPos(BSTR pGuardPosInfo);
		[id(509), helpstring("添加电视墙轮巡计划")] LONG IVS_OCX_AddCameraSwitchPlanTVWall(BSTR pSwitchPlanInfo);
		[id(510), helpstring("删除电视墙轮巡计划")] LONG IVS_OCX_DelCameraSwitchPlanTVWall(ULONG ulTVWallID,BSTR pCameraSwitchID);
		[id(511), helpstring("获取轮巡计划列表")] BSTR IVS_OCX_GetCameraSwitchPlanListTVWall(void);
		[id(512), helpstring("获取轮训计划")] BSTR IVS_OCX_GetCameraSwitchPlanTVWall(ULONG ulTVWallID,BSTR pCameraSwitchID);
		[id(513)] LONG IVS_OCX_ModLockBackupRecord(BSTR pLockXml);
		[id(514)] LONG IVS_OCX_PlayBackPauseTVWall(ULONG ulTVWallID, LONG lWndID);
		[id(515)] LONG IVS_OCX_PlayBackResumeTVWall(ULONG ulTVWallID, LONG lWndID);
		[id(516)] LONG IVS_OCX_StartPUPlayBackTVWall(ULONG ulTVWallID, BSTR pCameraCode, BSTR pPlaybackParam, LONG lWndID);
		[id(517)] LONG IVS_OCX_StopPUPlayBackTVWall(ULONG ulTVWallID, LONG lWndID);
		[id(518)] BSTR IVS_OCX_GetRecordThumbnail(BSTR pThumbnailQuery);
		[id(519)] ULONG IVS_OCX_GetPaneWnd(ULONG ulWndID);
		[id(520)] LONG IVS_OCX_SetDevPWD(BSTR pReqXml);
		[id(521)] LONG IVS_OCX_SetSkin(ULONG ulSkinType);
		[id(522)] LONG IVS_OCX_ResetAlarm(BSTR pReqXml);
		[id(523)] LONG IVS_OCX_ExEventSubscribe(BSTR pReqXml);
		[id(524)] BSTR IVS_OCX_GetExEventSubscribe(BSTR pReqXml);
		[id(525)] LONG IVS_OCX_ExCatalogSubscribe(BSTR pReqXml);
		[id(526)] BSTR IVS_OCX_GetExCatalogSubscribeList(BSTR pReqXml);
		[id(527)] LONG IVS_OCX_StartBackupPlayBackTVWall(ULONG ulTVWallID, BSTR pDomainCode, BSTR pNVRCode, BSTR pCameraCode, BSTR pPlaybackParam, LONG lWndID);
		[id(528)] LONG IVS_OCX_StopBackuplayBackTVWall(ULONG ulTVWallID, LONG lWndID);
		[id(529)] ULONG IVS_OCX_GetAbilityInfo(void);
		[id(530)] LONG IVS_OCX_SetScenarioRecovery(LONG lRecovery);
		[id(531)] LONG IVS_OCX_GetScenarioRecovery(void);
		[id(532)] BSTR IVS_OCX_GetGraphicSelected(ULONG ulWindowID);
		[id(533)] void IVS_OCX_EnableExchangePane(ULONG ulStatus);
		[id(534)] LONG IVS_OCX_SetRealTimeTempScenario(BSTR pRealTimeScenarioXml, BSTR pScenarioID);
		[id(535)] LONG IVS_OCX_SetRecordTempScenario(BSTR pRecordScenarioXml, BSTR pScenarioID);
		[id(536)] LONG IVS_OCX_SetEmapTempScenario(BSTR pEmapScenarionXml, BSTR pScenarioID);
		[id(537)] BSTR IVS_OCX_GetRealTimeTempScenario(BSTR pScenarioID);
		[id(538)] BSTR IVS_OCX_GetRecordTempScenario(BSTR pScenarioID);
		[id(539)] BSTR IVS_OCX_GetEmapTempScenario(BSTR pScenarioID);
		[id(540)] void IVS_OCX_KeyEventNotice(ULONG ulCtrlKey, ULONG ulKey);
		[id(541)] ULONG IVS_OCX_SetTitleBarStatus(ULONG ulWndID, ULONG ulStatusType, ULONG ulShow);
        [id(542)] LONG IVS_OCX_ModCameraSwitch(BSTR pSwitchInfo);
		[id(543)] LONG IVS_OCX_DeleteBroadcastFile(BSTR pFileName);
		[id(544)] BSTR IVS_OCX_GetBroadcastCameraList(void);
		[id(545)] LONG IVS_OCX_AddBroadcastFile(BSTR pFileName);
		[id(546)] BSTR IVS_OCX_GetBroadcastFileList(void);
		[id(547)] BSTR IVS_OCX_ExGetDeviceStatus(BSTR pReqXml);
		[id(548)] LONG IVS_OCX_ExGetDeviceInfo(BSTR pReqXml);
        [id(549)] LONG IVS_OCX_RefreshCameraList();
        [id(550)] BSTR IVS_OCX_GetDeviceEncodeCapabilities(BSTR pDevCode);
	    [id(551)] BSTR IVS_OCX_GetCUVersion(BSTR pReqXml);
	    [id(552)] LONG IVS_OCX_StartRealPlayTVWall_Async(ULONG ulTVWallID, BSTR pCameraCode, BSTR pRealplayParam, ULONG ulWndID, ULONG ulTransID);
	    [id(553)] LONG IVS_OCX_StopRealPlayTVWall_Async(ULONG ulTVWallID, ULONG ulWndID);
        [id(554)] LONG IVS_OCX_StartRealPlay_Async(BSTR pMediaPara, BSTR pCameraCode, LONG lWndID, ULONG lTransID);
	    [id(555)] LONG IVS_OCX_StopRealPlay_Async(LONG lWndID);
        [id(556)] void IVS_OCX_SetLogLevel(ULONG ulLogLevel);
		[id(557), helpstring("单点登录")] LONG IVS_OCX_LoginByTicket(BSTR pTicketID, BSTR pServerIP, BSTR pPort, ULONG ulClientType);
		[id(558), helpstring("设置SDK是否接收OMU设备类告警")] LONG IVS_OCX_SetReceiveOMUAlarm(LONG bReceive);
		[id(559), helpstring("查询单台VCN的视频质量诊断计划")] BSTR IVS_OCX_GetVideoDiagnose(BSTR pDomainCode, BSTR pCameraCode);
		[id(560), helpstring("设置单台VCN的视频质量诊断计划")] LONG IVS_OCX_SetVideoDiagnose(BSTR pReqXml);
		[id(561), helpstring("根据摄像机Code，查询该摄像机正在给哪些用户提供视频业务")] BSTR IVS_OCX_GetStreamListByCam(BSTR pDomainCode, BSTR pCameraCode);
		[id(562), helpstring("关闭指定用户的视频")] LONG IVS_OCX_ShutdownStreamByUser(BSTR pDomainCode, ULONG ulUserID, BSTR pCameraCode, LONG lStreamType, LONG lDuration);
		[id(563), helpstring("根据用户编码，查询该用户正在给调用哪些摄像机的视频业务")] BSTR IVS_OCX_GetStreamListByUser(BSTR pDomainCode, ULONG ulUserID);
		[id(564), helpstring("设置对讲音量")] LONG IVS_OCX_SetMicVolume(ULONG ulVolumeValue);
		[id(565), helpstring("获取对讲音量")] ULONG IVS_OCX_GetMicVolume(void);
		[id(566), helpstring("本地图像抓拍并保存到指定路径")] LONG IVS_OCX_LocalSnapshotToDir(LONG lWndID, ULONG ulPictureFormat, BSTR pFileName);
		[id(567), helpstring("设置录像视频质量")] LONG IVS_OCX_SetVideoEffect(LONG lWndID, LONG lBrightValue, LONG lContrastValue, LONG lSaturationValue, LONG lHueValue);
}
    //  Event dispatch interface for CIVS_OCXPlayerCtrl

    [ 
        uuid(8F5A25B5-B120-4C4B-B796-27904B2F5921)	
    ]
    dispinterface _DIVS_OCXPlayerEvents
    {
    properties:
        //  Event interface has no properties

    methods:
        [id(17)] void IVS_OCX_Event(LONG lEventType, BSTR pEventContent);
        [id(18)] void OnOCXInfoButtonClick(ULONG ulWndID, BSTR strDeviceName, ULONG ulVideoState, ULONG ulAudioState, ULONG ulFPS, ULONG ulCodeRate, ULONG ulVideoFomate);
        [id(19)] void OnAlarmLinkage(BSTR pAlarmLinkage);
        [id(20)] void OnAlarmReporter(BSTR pAarmReporter);
        [id(21)] void OnKeepAlive(ULONG ulResult);
	    [id(22)] void IVS_OCX_OnTVWall(BSTR pTVWallMsg);
		[id(23)] void IVS_OCX_Windows_Event(LONG lEventType, BSTR pEventContent);
        [id(24)] void OnNetKeyBoard(BSTR pNetKeyBoardMsg);
	};

	// C30 uuid(E81D3060-D081-4012-A754-88D3FF824169)
	// C60 uuid(FA7F8CDF-D58E-46C5-9923-DE376C24556F)
    // Class information for CIVS_OCXPlayerCtrl
	// 原来的是6A04070B-ED54-4D20-B8C4-B1AEB7756D85
    [
        uuid(3556A474-8B23-496F-9E5D-38F7B74654F4), licensed
    ]
    coclass IVS_OCXPlayer
    {
        [default] dispinterface _DIVS_OCXPlayer;
        [default, source] dispinterface _DIVS_OCXPlayerEvents;
    };
};
